classDiagram
    %% Core Application
    class VueApplication {
        -app: App
        -router: Router
        -store: Store
        -config: AppConfig
        +mount(element: string)
        +unmount()
        +use(plugin: Plugin)
    }
    
    class Router {
        -routes: RouteConfig[]
        -history: RouterHistory
        +push(location: string)
        +replace(location: string)
        +go(delta: number)
        +addRoute(route: RouteConfig)
        +currentRoute() Route
    }
    
    class Store {
        -state: State
        -getters: Getters
        -actions: Actions
        -mutations: Mutations
        +dispatch(action: string, payload: any)
        +commit(mutation: string, payload: any)
        +getState() State
    }
    
    %% State Management
    class WidgetStore {
        -widgets: Widget[]
        -activeWidgets: string[]
        -widgetConfigs: Map
        +registerWidget(widget: Widget)
        +activateWidget(widgetId: string)
        +deactivateWidget(widgetId: string)
        +updateWidgetData(widgetId: string, data: any)
        +getWidgetConfig(widgetId: string) WidgetConfig
    }
    
    class ConfigStore {
        -userConfig: UserConfig
        -layoutConfig: LayoutConfig
        -theme: Theme
        +loadConfig()
        +saveConfig()
        +updateTheme(theme: Theme)
        +getPreference(key: string) any
    }
    
    class ConnectionStore {
        -isOnline: boolean
        -websocketConnected: boolean
        -lastSync: Date
        +connect()
        +disconnect()
        +checkConnection() boolean
    }
    
    %% API Client
    class APIClient {
        -baseUrl: string
        -token: string
        -timeout: number
        +get(endpoint: string, params: object) Promise
        +post(endpoint: string, data: object) Promise
        +put(endpoint: string, data: object) Promise
        +delete(endpoint: string) Promise
        -handleError(error: Error)
        -setAuthHeader(token: string)
    }
    
    class WebSocketClient {
        -socket: WebSocket
        -reconnectInterval: number
        -handlers: Map
        +connect(url: string)
        +disconnect()
        +send(message: object)
        +on(event: string, handler: Function)
        +off(event: string)
        -handleMessage(message: MessageEvent)
        -reconnect()
    }
    
    %% Widget Base Classes
    class BaseWidget {
        <<abstract>>
        #id: string
        #type: string
        #config: WidgetConfig
        #data: any
        #isLoading: boolean
        +mounted()
        +unmounted()
        +update()*
        +refresh()
        +configure(config: WidgetConfig)
        +getData() any
    }
    
    class ClockWidget {
        -currentTime: Date
        -format: string
        -timezone: string
        -interval: number
        +update()
        +setFormat(format: string)
        +setTimezone(timezone: string)
        -tick()
    }
    
    class WeatherWidget {
        -weatherData: WeatherData
        -forecast: WeatherForecast[]
        -location: string
        -updateInterval: number
        +update()
        +changeLocation(location: string)
        +getForecast() WeatherForecast[]
        -fetchWeather()
    }
    
    class CalendarWidget {
        -events: CalendarEvent[]
        -daysToShow: number
        -selectedCalendars: string[]
        +update()
        +filterEvents(filter: EventFilter)
        +getUpcomingEvents() CalendarEvent[]
        -syncCalendar()
    }
    
    class SmartHomeWidget {
        -devices: SmartHomeDevice[]
        -rooms: string[]
        -selectedRoom: string
        +update()
        +controlDevice(deviceId: string, command: string)
        +filterByRoom(room: string)
        +getDeviceStatus(deviceId: string)
        -updateDeviceStates()
    }
    
    class MusicWidget {
        -playbackState: PlaybackState
        -currentTrack: Track
        +update()
        +play()
        +pause()
        +next()
        +previous()
        +setVolume(volume: number)
        -updatePlayback()
    }
    
    class NotesWidget {
        -notes: Note[]
        -activeNote: Note
        +update()
        +createNote(content: string)
        +editNote(noteId: string, content: string)
        +deleteNote(noteId: string)
        -saveNotes()
    }
    
    class NewsWidget {
        -articles: NewsArticle[]
        -sources: string[]
        -category: string
        +update()
        +changeCategory(category: string)
        +refreshNews()
        -fetchArticles()
    }
    
    %% UI Components
    class WidgetContainer {
        -widget: BaseWidget
        -position: Position
        -size: Size
        -isDraggable: boolean
        -isResizable: boolean
        +render()
        +move(position: Position)
        +resize(size: Size)
        +remove()
    }
    
    class LayoutManager {
        -containers: WidgetContainer[]
        -gridSize: GridSize
        -snapToGrid: boolean
        +addWidget(widget: BaseWidget, position: Position)
        +removeWidget(widgetId: string)
        +repositionWidget(widgetId: string, position: Position)
        +saveLayout()
        +loadLayout()
        -calculateGrid()
    }
    
    class ConfigurationPanel {
        -activeTab: string
        -isVisible: boolean
        +show()
        +hide()
        +toggleTab(tab: string)
        +saveSettings()
        +resetSettings()
    }
    
    class NotificationSystem {
        -notifications: Notification[]
        -maxNotifications: number
        +show(message: string, type: string, duration: number)
        +dismiss(notificationId: string)
        +dismissAll()
        -autoRemove(notificationId: string, delay: number)
    }
    
    %% Composables
    class UseWebSocket {
        +socket: WebSocketClient
        +isConnected: Ref~boolean~
        +connect(url: string)
        +disconnect()
        +send(message: object)
        +onMessage(handler: Function)
    }
    
    class UseAPI {
        +client: APIClient
        +isLoading: Ref~boolean~
        +error: Ref~Error~
        +get(endpoint: string) Promise
        +post(endpoint: string, data: object) Promise
    }
    
    class UseWidgetConfig {
        +config: Ref~WidgetConfig~
        +updateConfig(updates: Partial~WidgetConfig~)
        +resetConfig()
        +saveConfig()
    }
    
    %% Relationships
    VueApplication --> Router
    VueApplication --> Store
    Store --> WidgetStore
    Store --> ConfigStore
    Store --> ConnectionStore
    
    BaseWidget <|-- ClockWidget
    BaseWidget <|-- WeatherWidget
    BaseWidget <|-- CalendarWidget
    BaseWidget <|-- SmartHomeWidget
    BaseWidget <|-- MusicWidget
    BaseWidget <|-- NotesWidget
    BaseWidget <|-- NewsWidget
    
    WidgetContainer --> BaseWidget
    LayoutManager --> WidgetContainer
    
    UseWebSocket --> WebSocketClient
    UseAPI --> APIClient





classDiagram
    %% Widget Types
    class WidgetType {
        <<enumeration>>
        CLOCK
        WEATHER
        CALENDAR
        SMART_HOME
        MUSIC
        NOTES
        NEWS
    }
    
    class Widget {
        <<interface>>
        +id: string
        +type: WidgetType
        +name: string
        +config: WidgetConfig
        +mounted()
        +unmounted()
        +update()
    }
    
    class WidgetConfig {
        <<interface>>
        +widgetId: string
        +position: Position
        +size: Size
        +settings: Record~string, any~
        +updateInterval: number
        +isEnabled: boolean
    }
    
    %% API Types
    class APIEndpoint {
        <<interface>>
        +path: string
        +method: HTTPMethod
        +params: Record~string, any~
        +headers: Record~string, string~
    }
    
    class APIResponse~T~ {
        <<interface>>
        +success: boolean
        +data: T
        +message: string
        +errors: string[]
        +timestamp: Date
    }
    
    class HTTPMethod {
        <<enumeration>>
        GET
        POST
        PUT
        DELETE
        PATCH
    }
    
    %% Config Types
    class AppConfig {
        <<interface>>
        +apiBaseUrl: string
        +websocketUrl: string
        +theme: Theme
        +language: string
        +debugMode: boolean
    }
    
    class UserPreferences {
        <<interface>>
        +username: string
        +locale: string
        +timezone: string
        +dateFormat: string
        +timeFormat: string
        +temperatureUnit: TemperatureUnit
    }
    
    class Theme {
        <<interface>>
        +name: string
        +primaryColor: string
        +secondaryColor: string
        +backgroundColor: string
        +textColor: string
        +isDark: boolean
    }
    
    %% Event Types
    class EventType {
        <<enumeration>>
        WIDGET_UPDATE
        WIDGET_ERROR
        CONFIG_CHANGE
        CONNECTION_STATUS
        USER_INTERACTION
    }
    
    class CustomEvent~T~ {
        <<interface>>
        +type: EventType
        +payload: T
        +timestamp: Date
        +source: string
    }
    
    %% Layout Types
    class Position {
        <<interface>>
        +x: number
        +y: number
        +zIndex: number
    }
    
    class Size {
        <<interface>>
        +width: number
        +height: number
        +minWidth: number
        +minHeight: number
    }
    
    class GridSize {
        <<interface>>
        +columns: number
        +rows: number
        +cellSize: number
        +gap: number
    }
    
    class LayoutConfig {
        <<interface>>
        +layoutId: string
        +name: string
        +gridSize: GridSize
        +widgets: WidgetPlacement[]
    }
    
    class WidgetPlacement {
        <<interface>>
        +widgetId: string
        +position: Position
        +size: Size
    }
    
    %% Notification Types
    class NotificationType {
        <<enumeration>>
        INFO
        SUCCESS
        WARNING
        ERROR
    }
    
    class Notification {
        <<interface>>
        +id: string
        +type: NotificationType
        +message: string
        +duration: number
        +isDismissible: boolean
    }
    
    %% WebSocket Types
    class WebSocketEvent {
        <<interface>>
        +event: string
        +data: any
        +timestamp: Date
    }
    
    class ConnectionStatus {
        <<enumeration>>
        CONNECTED
        DISCONNECTED
        CONNECTING
        ERROR
    }
    
    %% Relationships
    Widget --> WidgetType
    Widget --> WidgetConfig
    WidgetConfig --> Position
    WidgetConfig --> Size
    
    APIEndpoint --> HTTPMethod
    
    AppConfig --> Theme
    
    CustomEvent --> EventType
    
    LayoutConfig --> GridSize
    LayoutConfig --> WidgetPlacement
    WidgetPlacement --> Position
    WidgetPlacement --> Size
    
    Notification --> NotificationType
